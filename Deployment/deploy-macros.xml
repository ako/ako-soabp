<?xml version="1.0" encoding="UTF-8"?>
<project name="Deployment-macros" default="default" basedir=".">
    <description>Macros used for deployment</description>
    <path id="tool.path">
        <pathelement location="${user.home}/.m2/repository/org/codehaus/groovy/groovy-all/1.7.2/groovy-all-1.7.2.jar"/>
        <pathelement location="${user.home}/.m2/repository/org/apache/ivy/ivy/2.1.0/ivy-2.1.0.jar"/>
        <pathelement location="${user.home}/.m2/repository/org/codehaus/groovy/modules/http-builder/http-builder/0.5.0/http-builder-0.5.0.jar"/>
        <pathelement location="${user.home}/.m2/repository/org/glassfish/extras/glassfish-embedded-all/3.0/glassfish-embedded-all-3.0.jar"/>
        <pathelement location="${user.home}/.m2/repository/postgresql/postgresql/8.4-701.jdbc4/postgresql-8.4-701.jdbc4.jar"/>
    </path>
    <taskdef name="groovy"
             classname="org.codehaus.groovy.ant.Groovy"
             classpathref="tool.path"/>
    <macrodef name="gf-redeploy-war">
        <attribute name="warFile"/>
        <attribute name="appName"/>
        <attribute name="host" default="localhost"/>
        <attribute name="adminPort" default="4848"/>
        <attribute name="adminUser" default="admin"/>
        <attribute name="adminPasswordFile" default="${basedir}/passwords.properties"/>
        <sequential>
            <java classname="com.sun.enterprise.admin.cli.AsadminMain" fork="true" classpathref="tool.path">
                <arg line="--user @{adminUser}"/>
                <arg line="--interactive=false"/>
                <arg line="--host @{host}"/>
                <arg line="--port @{adminPort}"/>
                <arg line="--passwordfile @{adminPasswordFile}"/>
                <arg line="redeploy"/>
                <arg line="--name @{appName}"/>
                <arg line="@{warFile}"/>
            </java>
        </sequential>
    </macrodef>
    <macrodef name="gf-undeploy-war">
        <attribute name="warFile"/>
        <attribute name="appName"/>
        <attribute name="host" default="localhost"/>
        <attribute name="adminPort" default="4848"/>
        <attribute name="adminUser" default="admin"/>
        <attribute name="adminPasswordFile" default="${basedir}/passwords.properties"/>
        <sequential>
            <java classname="com.sun.enterprise.admin.cli.AsadminMain" fork="true" classpathref="tool.path">
                <arg line="--user @{adminUser}"/>
                <arg line="--interactive=false"/>
                <arg line="--host @{host}"/>
                <arg line="--port @{adminPort}"/>
                <arg line="--passwordfile @{adminPasswordFile}"/>
                <arg line="undeploy"/>
                <arg line="@{appName}"/>
            </java>
        </sequential>
    </macrodef>
    <macrodef name="gf-deploy-war">
        <attribute name="warFile"/>
        <attribute name="appName"/>
        <attribute name="host" default="localhost"/>
        <attribute name="adminPort" default="4848"/>
        <attribute name="adminUser" default="admin"/>
        <attribute name="adminPasswordFile" default="${basedir}/passwords.properties"/>
        <sequential>
            <java classname="com.sun.enterprise.admin.cli.AsadminMain" fork="true" classpathref="tool.path">
                <arg line="--user @{adminUser}"/>
                <arg line="--interactive=false"/>
                <arg line="--host @{host}"/>
                <arg line="--port @{adminPort}"/>
                <arg line="--passwordfile @{adminPasswordFile}"/>
                <arg line="deploy"/>
                <arg line="--name @{appName}"/>
                <arg line="@{warFile}"/>
            </java>
        </sequential>
    </macrodef>
    <macrodef name="pgsql-deploy">
        <attribute name="zipFile"/>
        <attribute name="jdbcUrl"/>
        <attribute name="version"/>
        <attribute name="dbUsername"/>
        <attribute name="dbPassword"/>
        <sequential>
            <delete dir="${java.io.tmpdir}/pgsql-deploy" quiet="true"/>
            <copy file="@{zipFile}" todir="${java.io.tmpdir}/pgsql-deploy"/>
            <unzip dest="${java.io.tmpdir}/pgsql-deploy">
                <fileset dir="${java.io.tmpdir}/pgsql-deploy">
                    <include name="*.zip"/>
                </fileset>
            </unzip>
            <sql driver="org.postgresql.Driver"
                 userid="@{dbUsername}"
                 password="@{dbPassword}"
                 url="@{jdbcUrl}"
                 classpathref="tool.path" onerror="stop">
                <path>
                    <fileset dir="${java.io.tmpdir}/pgsql-deploy/" includes="**/@{version}/drop-schema.sql"/>
                    <fileset dir="${java.io.tmpdir}/pgsql-deploy/" includes="**/@{version}/create-schema.sql"/>
                    <fileset dir="${java.io.tmpdir}/pgsql-deploy/" includes="**/@{version}/validate-schema.sql"/>
                </path>
            </sql>
        </sequential>
    </macrodef>
    <macrodef name="psql-deploy">
        <attribute name="zipFile"/>
        <attribute name="databaseHost"/>
        <attribute name="databaseName"/>
        <attribute name="version"/>
        <attribute name="dbUsername"/>
        <attribute name="dbPassword"/>
        <sequential>
            <delete dir="${java.io.tmpdir}/pgsql-deploy" quiet="true"/>
            <copy file="@{zipFile}" todir="${java.io.tmpdir}/pgsql-deploy"/>
            <unzip dest="${java.io.tmpdir}/pgsql-deploy">
                <fileset dir="${java.io.tmpdir}/pgsql-deploy" includes="*.zip"/>
            </unzip>
            <path id="db.drop.script">
                <fileset dir="${java.io.tmpdir}/pgsql-deploy/" includes="**/@{version}/drop-schema.sql"/>
            </path>
            <path id="db.create.script">
                <fileset dir="${java.io.tmpdir}/pgsql-deploy/" includes="**/@{version}/create-schema.sql"/>
            </path>
            <path id="db.validate.script">
                <fileset dir="${java.io.tmpdir}/pgsql-deploy/" includes="**/@{version}/validate-schema.sql"/>
            </path>
            <psql sqlFile="${toString:db.drop.script}"
                  databaseHost="@{databaseHost}"
                  databaseName="@{databaseName}"
                  dbUsername="@{dbUsername}"
                  dbPassword="@{dbPassword}"
                  />
            <psql sqlFile="${toString:db.create.script}"
                  databaseHost="@{databaseHost}"
                  databaseName="@{databaseName}"
                  dbUsername="@{dbUsername}"
                  dbPassword="@{dbPassword}"
                  />
            <psql sqlFile="${toString:db.validate.script}"
                  databaseHost="@{databaseHost}"
                  databaseName="@{databaseName}"
                  dbUsername="@{dbUsername}"
                  dbPassword="@{dbPassword}"
                  />
        </sequential>
    </macrodef>
    <macrodef name="psql">
        <attribute name="sqlFile"/>
        <attribute name="databaseHost" default="localhost"/>
        <attribute name="databasePort" default="5432"/>
        <attribute name="databaseName"/>
        <attribute name="dbUsername"/>
        <attribute name="dbPassword"/>
        <sequential>
            <exec executable="${psql.path}">
                <arg line="-d @{databaseName}"/>
                <arg line="-h @{databaseHost}"/>
                <arg line="-p @{databasePort}"/>
                <arg line="-U @{dbUsername}"/>
                <arg line="-w"/>
                <arg line="-f @{sqlFile}"/>
                <env key="PGPASSWORD" value="@{dbPassword}"/>
            </exec>
        </sequential>
    </macrodef>
    <macrodef name="sqlplus-deploy">
        <attribute name="zipFile"/>
        <attribute name="databaseHost"/>
        <attribute name="databaseName"/>
        <attribute name="version"/>
        <attribute name="dbUsername"/>
        <attribute name="dbPassword"/>
        <sequential>
            <delete dir="${java.io.tmpdir}/sql-deploy" quiet="true"/>
            <copy file="@{zipFile}" todir="${java.io.tmpdir}/sql-deploy"/>
            <unzip dest="${java.io.tmpdir}/sql-deploy">
                <fileset dir="${java.io.tmpdir}/sql-deploy" includes="*.zip"/>
            </unzip>
            <path id="db.drop.script">
                <fileset dir="${java.io.tmpdir}/sql-deploy/" includes="**/@{version}/drop_schema.sql"/>
            </path>
            <path id="db.create.script">
                <fileset dir="${java.io.tmpdir}/sql-deploy/" includes="**/@{version}/create_schema.sql"/>
            </path>
            <path id="db.validate.script">
                <fileset dir="${java.io.tmpdir}/sql-deploy/" includes="**/@{version}/validate_schema.sql"/>
            </path>
            <sqlplus sqlFile="${toString:db.drop.script}"
                     databaseHost="@{databaseHost}"
                     databaseName="@{databaseName}"
                     dbUsername="@{dbUsername}"
                     dbPassword="@{dbPassword}"
                     />
            <sqlplus sqlFile="${toString:db.create.script}"
                     databaseHost="@{databaseHost}"
                     databaseName="@{databaseName}"
                     dbUsername="@{dbUsername}"
                     dbPassword="@{dbPassword}"
                     />
            <sqlplus sqlFile="${toString:db.validate.script}"
                     databaseHost="@{databaseHost}"
                     databaseName="@{databaseName}"
                     dbUsername="@{dbUsername}"
                     dbPassword="@{dbPassword}"
                     />
        </sequential>
    </macrodef>
    <macrodef name="sqlplus">
        <attribute name="sqlFile"/>
        <attribute name="databaseHost" default="localhost"/>
        <attribute name="databasePort" default="1521"/>
        <attribute name="databaseName" default="XE"/>
        <attribute name="dbUsername"/>
        <attribute name="dbPassword"/>
        <sequential>
            <exec executable="${sqlplus.path}">
                <echo>Running Oracle Sql script @{sqlFile}</echo>
                <arg line="@{dbUsername}/@{dbPassword}@@//@{databaseHost}:@{databasePort}/@{databaseName}"/>
                <arg line="@@@{sqlFile}"/>
            </exec>
        </sequential>
    </macrodef>
    <macrodef name="smx-osgi-bundle-deploy">
        <attribute name="bundleUrl"/>
        <attribute name="smxHost" default="localhost"/>
        <attribute name="smxSshPort" default="8101"/>
        <attribute name="smxAdminUsername" default="karaf"/>
        <attribute name="smxAdminPassword" default="karaf"/>
        <sequential>
            <echo>deploying osgi bundle @{bundleUrl} to ServiceMix ESB on @{esbHost}</echo>
            <!--
            <sshexec host="@{esbHost}" port="8101" username="karaf" password="karaf" command="osgi:uninstall @{bundleUrl}" failonerror="false"/>
            <sshexec host="@{esbHost}" port="8101" username="karaf" password="karaf" command="osgi:install @{bundleUrl}" failonerror="false"/>
            -->
            <groovy>
                <![CDATA[
                def idx = 0
                def getBundleId = { bundleJar ->
                    def jarFileName = (new File(bundleJar)).name
                    ant.project.properties.remove("osgi_list_output")
                    def result = ant.sshexec(host:"@{smxHost}",
                                             port:@{smxSshPort},
                                            password:"@{smxAdminUsername}",
                                            username:"@{smxAdminPassword}",
                                            command:"osgi:list -l",
                                            outputProperty:"osgi_list_output" + (++idx),
                                            trust:"true"
                                            )
                    println "jarFileName: ${jarFileName}"
                    def osgiListOut = ant.project.properties['osgi_list_output' + idx]
                    def bundleLine = (osgiListOut =~ /(?m)^.*${jarFileName}.*$/)
                    if(bundleLine.size() > 0){
                        println "bundleLine: ${bundleLine[0]}"
                        existingBundleId = (bundleLine[0] =~ /\d+/)[0]
                        println "bundleId: ${existingBundleId}"
                    }
                    return existingBundleId
                }
                def ant = new AntBuilder()
                def bundleId = getBundleId("@{bundleUrl}")
                if ( bundleId ) {
                    def result3 = ant.sshexec(host:"@{smxHost}",
                                         port:@{smxSshPort},
                                         password:"@{smxAdminUsername}",
                                         username:"@{smxAdminPassword}",
                                            trust:"true",
                                         command:"osgi:uninstall ${bundleId}")
                }
                def result2 = ant.sshexec(host:"@{smxHost}",
                                         port:@{smxSshPort},
                                         password:"@{smxAdminUsername}",
                                         username:"@{smxAdminPassword}",
                                            trust:"true",
                                         command:"osgi:install @{bundleUrl}")
                def newBundleId = getBundleId("@{bundleUrl}")
                def result4 = ant.sshexec(host:"@{smxHost}",
                                         port:@{smxSshPort},
                                         password:"@{smxAdminUsername}",
                                         username:"@{smxAdminPassword}",
                                            trust:"true",
                                         command:"osgi:headers ${newBundleId}")
                ]]>
            </groovy>
        </sequential>
    </macrodef>
</project>
