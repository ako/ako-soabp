<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:amq="http://activemq.apache.org/schema/core" xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.2.0.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    ">

    <amq:broker>
        <amq:persistenceAdapter>
            <amq:amqPersistenceAdapter syncOnWrite="false"
                directory="${activemq.base}/data" maxFileLength="20 mb" />
        </amq:persistenceAdapter>
        <!--
            The maximum about of space the broker will use before slowing down
            producers
        -->
        <amq:systemUsage>
            <amq:systemUsage>
                <amq:memoryUsage>
                    <amq:memoryUsage limit="20 mb" />
                </amq:memoryUsage>
                <amq:storeUsage>
                    <amq:storeUsage limit="1 gb" name="foo" />
                </amq:storeUsage>
                <amq:tempUsage>
                    <amq:tempUsage limit="100 mb" />
                </amq:tempUsage>
            </amq:systemUsage>
        </amq:systemUsage>

        <!-- The transport connectors ActiveMQ will listen to -->
        <amq:transportConnectors>
            <amq:transportConnector name="openwire"
                uri="tcp://localhost:61616" />
            <amq:transportConnector name="stomp"
                uri="stomp://localhost:61613" />
        </amq:transportConnectors>
    </amq:broker>

    <!--
        configure the camel activemq component to use the current broker
    -->
        <!-- create the activemq component so that we can use the activemq uri -->
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent"
        p:brokerURL="vm://localhost?create=false&amp;waitForStart=10000" />

    <!--
        Here is a sample which processes the input files (leaving them in
        place - see the 'noop' flag), and sends them on a JMS queue. This
        queue is watched by another route which then performs content based
        routing on the messages using XPath.
    -->
    <camel:camelContext>
        <camel:package>com.intuit.ai.step.camel</camel:package>
        <camel:route>
            <camel:from uri="file:src/data?noop=true" />
            <!-- Print the message to standard out, just as a test -->
            <camel:convertBodyTo type="java.lang.String" />
            <camel:to uri="stream:out" />
            <camel:to uri="activemq:personnel.records" />
        </camel:route>

        <camel:route>
            <camel:from uri="activemq:personnel.records" />
            <camel:choice>
                <camel:when>
                    <camel:xpath>/person/city = 'London'</camel:xpath>
                    <camel:to uri="file:target/messages/uk" />
                </camel:when>
                <camel:otherwise>
                    <camel:to uri="file:target/messages/others" />
                </camel:otherwise>
            </camel:choice>
        </camel:route>
    </camel:camelContext>

</beans>
